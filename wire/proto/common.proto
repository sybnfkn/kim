syntax = "proto3";
package pkt;
option go_package = "./pkt";

// status is a uint16 value 
enum Status {
    Success = 0;
    // client defined
    
    // client error 100-200
    NoDestination = 100;
    InvalidPacketBody = 101;
    InvalidCommand = 103;
    Unauthorized = 105 ;
    // server error 300-400
    SystemException = 300;
    NotImplemented = 301;
    //specific error
    SessionNotFound = 404; // session lost 
}

enum MetaType {
    int = 0;
    string = 1;
    float = 2;
}

enum ContentType {
    Protobuf = 0;
    Json = 1;
}

enum Flag {
    Request = 0;
    Response = 1;
    Push = 2;
}

message Meta {
    string key = 1;
    string value = 2;
    MetaType type = 3;
}

message Header {
    // 消息指令类似于http中的path，由于指定消息的处理逻辑，实际上很多系统的指令都是int类型，可以减少消息包大小。
    // 由于我们把逻辑服务分成多个子服务，因此在网关层就需要一个标识知道消息包是转发给谁。
    // 所以在command中定义了一个通过格式：服务名.指令，比如login.signin表示一个登录协议，其中login就是服务名
    string command = 1;
    // sender channel id
    // 在通信系统中，登录与消息的收发都是使用Account或UserId之类的用户唯一身份标识。
    // 通常在业务层会话管理中记录的是用户身份标识，但是在网关的连接管理中记录的是一个临时生成的连接唯一标识，用channelId表示。
    // *** 用户标识也是全局唯一，为什么不直接使用用户标识？***
    //     用户标识在空间维度是唯一的，但是在时间维度是不唯一，简单来说就是同一个用户账号存在同时登录的情况，导致系统在某个时刻有多个相同账号的连接，会造成逻辑混乱。
    //     因此在用户登录到网关上时，连接管理中记录的是一个临时生成的全局唯一标识，而在逻辑服务中使用用户标识作为索引。
    string channelId = 2;
    // 序列号是发送方生成的消息唯一标识。长连接通信协议是一个全双工协议，它与Http1.x半双工协议的区别在于全双工协议中消息的的发送与接收是没有顺序要求的
    //  那么全双工通信协议是怎么解决这个问题的呢，实际上就是协议头中有个序列号字段，在请求时写入自增的序列号到request的Header中，
    //  服务端处理完请求之后，在响应包头中带上请示包中的序列号，客户端收到消息之后就可以配对了。
    uint32 sequence = 3;
    // Request: 表示一条请求消息，通常是客户端发起。
    // Response: 表示一条响应消息，通常是7.指令处理器返回。
    // Push: 表示一条推送消息，通常是7.指令处理器转发出去
    Flag flag = 4;
    // 系统定义的一些常规状态码
    Status status = 5;
    // destination is defined as a account,group or room
    // 目标用于指定消息的接收方，在IM系统中有两类：用户和群，分别用Account和GroupId表示，系统通过协议Command来判断这个字段是用户还是群。
    string dest = 6;
    repeated Meta meta = 7;
}

message InnerHandshakeReq{
    string ServiceId = 1;
}

message InnerHandshakeResponse{
    uint32 Code = 1;
    string  Error = 2;
}